services:
  backend:
    build:
      context: ./Code/backend
      dockerfile: Dockerfile
    container_name: yt-backend
    ports:
      - "8000:8000"
    volumes:
      - ./Code/backend:/app/backend
      - ./Code/backend/transcripts:/app/backend/transcripts
      - ./Code/backend/vectorstore:/app/backend/vectorstore
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - yt_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  frontend:
    build:
      context: ./Code/frontend
      dockerfile: Dockerfile # This would now be the development Dockerfile
    container_name: yt-frontend
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000 (React Dev Server)
    volumes:
      - ./Code/frontend:/app/frontend
      - /app/frontend/node_modules # Important to exclude node_modules from host mount
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - yt_network
    environment:
      # If your React app needs to know the backend URL, you can pass it here.
      # When running locally, you'd connect to the backend service name.
      REACT_APP_API_BASE_URL: http://backend:8000 # Use service name for inter-container communication
      CHOKIDAR_USEPOLLING: "true" # Important for hot-reloading on some Docker setups
    healthcheck:
      # Change healthcheck to target the React dev server
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] # Dev server typically on 3000
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
networks:
  yt_network:
    driver: bridge